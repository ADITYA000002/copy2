2. For given infix expression eg. a-b*c-d/e+f, convert it into postfix expression using stack and show the operations step by step.

import java.util.Scanner;
import java.util.Stack;

public class InfixToPostfix {

    // Method to check precedence of operators
    public static int precedence(char ch) {
        switch (ch) {
            case '+':
            case '-':
                return 1;
            case '*':
            case '/':
                return 2;
            case '^':
                return 3;
        }
        return -1;
    }

    // Method to check if a character is an operator
    public static boolean isOperator(char ch) {
        return ch == '+' || ch == '-' || ch == '*' || ch == '/' || ch == '^';
    }

    // Method to convert infix to postfix
    public static String infixToPostfix(String expression) {
        StringBuilder result = new StringBuilder();  // Use StringBuilder for efficient string manipulation
        Stack<Character> stack = new Stack<>();

        for (int i = 0; i < expression.length(); i++) {
            char c = expression.charAt(i);

            if (Character.isLetterOrDigit(c)) {
                result.append(c);  // Append operand to result
            } else if (c == '(') {
                stack.push(c);  // Push opening parenthesis to stack
            } else if (c == ')') {
                while (!stack.isEmpty() && stack.peek() != '(') {
                    result.append(stack.pop());  // Pop operators from stack and append to result
                }
                stack.pop();  // Pop the opening parenthesis '('
            } else if (isOperator(c)) {
                // While the stack is not empty and precedence of the current operator is lower or equal
                while (!stack.isEmpty() && precedence(c) <= precedence(stack.peek())) {
                    result.append(stack.pop());  // Pop operators from stack and append to result
                }
                stack.push(c);  // Push current operator to stack
            }
        }

        // Append remaining operators in stack to result
        while (!stack.isEmpty()) {
            result.append(stack.pop());
        }

        return result.toString();  // Convert StringBuilder to String and return
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int choice;

        do {
            System.out.println("\nMenu: ");
            System.out.println("1. Convert Infix to Postfix");
            System.out.println("2. Exit");
            System.out.print("Enter your choice: ");
            choice = scanner.nextInt();
            scanner.nextLine();

            switch (choice) {
                case 1:
                    System.out.print("Enter an infix expression: ");
                    String infixExpression = scanner.nextLine();
                    String postfixExpression = infixToPostfix(infixExpression);
                    System.out.println("Postfix Expression: " + postfixExpression);
                    break;

                case 2:
                    System.out.println("Exiting...");
                    break;

                default:
                    System.out.println("Invalid choice! Please choose again.");
                    break;
            }
        } while (choice != 2);

        scanner.close();
    }
}
